# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
    config.vm.box = "ubuntu/bionic64"
    config.disksize.size = "20GB"

    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    config.vm.provider "virtualbox" do |vb|
        vb.customize ["modifyvm", :id, "--memory", "3072"]
        vb.customize ["modifyvm", :id, "--cpus", "2"]
        vb.customize ["modifyvm", :id, "--audio", "none"]
        vb.customize ["modifyvm", :id, "--usb", "off", "--usbehci", "off"]
        vb.customize ["modifyvm", :id, "--ioapic", "on"]
        vb.customize ["modifyvm", :id, "--hwvirtex", "on"]

        # Undo the logfile from canonical
        vb.customize ["modifyvm", :id, "--uartmode1", "disconnected" ]
    end

    config.vm.provision "file", source: "../docker/mrtbin/sbgp", destination: "/tmp/sbgp"
    config.vm.provision "file", source: "../docker/mrtbin/bgpsim", destination: "/tmp/bgpsim"
    config.vm.provision "file", source: "../docker/mrtbin/route_atob", destination: "/tmp/route_atob"
    config.vm.provision "file", source: "../docker/mrtbin/route_btoa", destination: "/tmp/route_btoa"

    setup_string = <<-SHELL
        apt-get install -y apt-transport-https dirmngr software-properties-common
        apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 8D81803C0EBFCD88
        apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 7EA0A9C3F273FCD8
        apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5A79DC32D4E07D09
        add-apt-repository ppa:hvr/ghc
        SHELL

    setup_string.concat(case config.vm.box
        when "ubuntu/xenial64"
            "add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable\"\n"
        when "ubuntu/artful64"
            "add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu artful stable\"\n"
        when "ubuntu/bionic64"
            "add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu artful stable\"\n"
	else
	    ""
        end)

    setup_string.concat <<-SHELL
        apt-get update -qy
        apt-get upgrade -y
        DEBIAN_FRONTEND=noninteractive apt-get install -y \
            bash bash-completion bird bsdtar cpio curl \
            docker-ce git iputils-ping gettext jq kmod logrotate \
            libc-ares2 libev4 libxml2-utils locales lvm2 make net-tools \
            netcat-openbsd nfs-kernel-server ntp \
            openjdk-8-jre openjdk-8-jdk \
            python python-dev python-ipaddr python-pip \
            python3 python3-dev python3-pip python3-venv\
            rsync sudo \
            ssh snmp tappy tidy udev vim xsltproc \
            virtualbox-guest-dkms virtualbox-guest-utils \
            autoconf build-essential libev-dev libxslt-dev \
            libffi-dev libssl-dev zlib1g-dev \
            libgmp-dev zlib1g-dev libedit-dev
        # Golang
        snap install go --classic
        # FRR routing
        PKG=frr_5.0.1-1.ubuntu18.04.1_amd64.deb; curl -fLO https://github.com/FRRouting/frr/releases/download/frr-5.0.1/$PKG ; dpkg -i $PKG ; rm $PKG
        PKG=frr-pythontools_5.0.1-1.ubuntu18.04.1_all.deb; curl -fLO https://github.com/FRRouting/frr/releases/download/frr-5.0.1/$PKG ; dpkg -i $PKG ; rm $PKG
        PKG=frr-doc_5.0.1-1.ubuntu18.04.1_all.deb; curl -fLO https://github.com/FRRouting/frr/releases/download/frr-5.0.1/$PKG ; dpkg -i $PKG ; rm $PKG
        echo en_US.UTF-8 UTF-8 >> /etc/locale.gen
        locale-gen
        # autoconf automake libtool make gcc g++ libgmp-dev ncurses-dev libtinfo-dev xz-utils # used by ghc.
        systemctl disable motd-news.service
        systemctl disable motd-news.timer
        systemctl disable systemd-timesyncd.service
        systemctl stop systemd-timesyncd.service
        systemctl disable unattended-upgrades.service
        systemctl stop unattended-upgrades.service
        sed -i -E -e 's/^pool.*/# &/' /etc/ntp.conf
        printf "server time100.stupi.se\nserver time10.stupi.se\n" >> /etc/ntp.conf
        systemctl enable ntp.service
        usermod -G docker vagrant
        pip3 install -U \
            coverage cryptography docker lxml netconf nose pylint pysnmp \
            pytest pyyaml tox twine wheel \
        pip3 install -U exabgp ryu
        mv /tmp/*bgp* /usr/bin/ || true
        mv /tmp/route* /usr/bin/ || true
        apt-get autoremove -y
        apt-get clean -y
        rm -f /var/lib/apt/lists/lock
        dd if=/dev/zero of=/EMPTY bs=1M || rm -f /EMPTY
        rm -f /EMPTY
        SHELL

    config.vm.provision "system-install",
                        type: "shell",
                        privileged: true,
                        preserve_order: true,
                        inline: setup_string

    # config.vm.provision "system-install",
    #                     type: "shell",
    #                     privileged: false,
    #                     preserve_order: true,
    #                     inline: <<-SHELL
    #     export GOPATH=/home/vagrant/go
    #     go get -u github.com/golang/dep/cmd/dep
    #     go get github.com/osrg/gobgp || true
    #     (cd $GOPATH/src/github.com/osrg/gobgp && dep ensure)
    #     (cd /go/src/github.com/osrg/gobgp/cmd/gobgp && go install) && \
    #     (cd /go/src/github.com/osrg/gobgp/cmd/gobgpd && go install)
    #     SHELL

end
